# XLKit - Cursor Rules for AI Agents

## Project Overview
XLKit is a modern Swift library for creating and manipulating Excel (.xlsx) files on macOS. 
Built with Swift 6.0, targeting macOS 12+, using modular SPM architecture.

## Architecture & Module Structure

### Core Modules
- **XLKitCore**: Core types, data structures, utilities (Workbook, Sheet, Cell, etc.)
- **XLKitFormatters**: CSV/TSV import/export functionality
- **XLKitImages**: Image processing and embedding utilities  
- **XLKitXLSX**: XLSX file generation engine
- **XLKit**: Main API that re-exports all submodules

### Module Dependencies
```
XLKit (main API)
├── XLKitCore (core types & utilities)
├── XLKitFormatters (CSV/TSV import/export)
├── XLKitImages (image processing & embedding)
└── XLKitXLSX (XLSX generation engine)

XLKitFormatters
└── XLKitCore

XLKitImages
└── XLKitCore

XLKitXLSX
├── XLKitCore
├── XLKitFormatters
└── XLKitImages
```

### Executable Target
```
XLKitTestRunner (executable)
└── XLKit
```

### XLKitTestRunner Overview

**Purpose**: Modular test runner for generating Excel files for testing and demonstration purposes.

**Structure**:
```
Sources/XLKitTestRunner/
├── main.swift                    # Entry point with command-line interface
├── ExcelGenerators.swift         # Excel generation functions
├── Templates/                    # Template files for new tests
│   └── TestGeneratorTemplate.swift
└── README.md                     # Documentation
```

**Usage**:
```bash
# Run default test (no-embeds)
swift run XLKitTestRunner

# Run specific test types
swift run XLKitTestRunner no-embeds
swift run XLKitTestRunner with-images
swift run XLKitTestRunner help

# Show help
swift run XLKitTestRunner help
```

**Available Test Types**:
- `no-embeds` / `no-images` - Generate Excel from CSV without images
- `with-embeds` / `with-images` - Generate Excel with image embeds (future)
- `csv-import` - Test CSV import functionality (future)
- `formatting` - Test cell formatting features (future)
- `embed` - Generate Excel with embedded images from CSV data

**Adding New Tests**:
1. Copy template: `cp Sources/XLKitTestRunner/Templates/TestGeneratorTemplate.swift Sources/XLKitTestRunner/YourTestName.swift`
2. Modify function name and logic
3. Register in main.swift switch statement
4. Update help text
5. Create GitHub Actions workflow if needed

**Naming Conventions**:
- Function names: camelCase (e.g., `generateExcelWithImages()`)
- Test types: kebab-case (e.g., `with-images`, `csv-import`)
- File names: PascalCase (e.g., `ExcelGenerators.swift`)

**Output Structure**:
```
Test-Workflows/
├── Embed-Test.xlsx          # From no-embeds test
├── Embed-Test-Embed.xlsx    # From embed test (with images)
└── [Your-Test].xlsx         # From custom tests
```

## File Organization & Paths

### Allowed Paths for Code Changes
allowed_paths = [
    "Sources/XLKit/",           # Main API module
    "Sources/XLKitCore/",       # Core types and utilities
    "Sources/XLKitFormatters/", # CSV/TSV functionality
    "Sources/XLKitImages/",     # Image processing
    "Sources/XLKitXLSX/",       # XLSX generation
    "Tests/XLKitTests/",        # Unit tests
    ".github/workflows/",       # CI/CD workflows
    "README.md",                # Documentation
    "AGENT.MD",                 # AI agent guide
    "Package.swift"             # Package configuration
]

### Disallowed Paths
disallowed_paths = [
    "Sources/XLKit/icons.xcassets/",  # No UI assets
    "Sources/XLKit/*.storyboard",     # No storyboards
    "Sources/XLKit/*.xib",            # No XIB files
    "Sources/XLKit/*.plist",          # No property lists
    "Sources/XLKit/*.json"            # No JSON configs
]

### Allowed File Extensions
allowed_extensions = [
    ".swift",    # Swift source files
    ".md",       # Markdown documentation
    ".yml",      # YAML configuration (CI/CD)
    ".yaml"      # YAML configuration (CI/CD)
]

## Platform & Technology Constraints

### Platform Requirements
require_swift_version = "6.0"
require_macos_version = "12.0"

### Disallowed Platforms
disallow_platforms = [
    "iOS",
    "Linux", 
    "Windows",
    "Android",
    "tvOS",
    "watchOS"
]

## Code Quality Standards

### Documentation Requirements
require_doc_comments = true
require_modular_api_docs = true

### Testing Requirements
require_unit_tests = true
require_image_and_column_sizing_tests = true
require_ci_pass = true
require_image_embedding_tests = true

### API Design Requirements
require_easy_to_use_api = true
require_csv_api = "XLKit static methods only"

## Coding Standards & Best Practices

### Swift 6.0 Compliance
- Use `@preconcurrency` imports for modules with Sendable types
- Note: Workbook and Sheet classes are not Sendable due to mutable state requirements
- Use modern Swift idioms and features
- Avoid force-unwraps and force-casts in public APIs

### Code Style & Formatting
- Use 4-space indentation (no tabs)
- Use trailing commas for better git diffs
- Group and reorder imports alphabetically
- Use MARK comments for code organization
- Follow the .swift-format configuration

### File Structure Standards
```swift
//
//  Filename.swift
//  XLKit • https://github.com/TheAcharya/XLKit
//  © 2025 Vigneswaran Rajkumar • Licensed under MIT License
//

import Foundation
@preconcurrency import XLKitCore

// MARK: - Section Name
// Implementation
```

### Error Handling Patterns
- Use specific XLKitError types
- Provide meaningful error messages
- Use guard statements for early returns
- Handle errors gracefully in public APIs

### Type Safety Requirements
- Use strong typing throughout
- Prefer enums over strings for constants
- Use structs for value types, classes for reference types
- Implement Equatable, Hashable where appropriate

## API Design Guidelines

### Main API (XLKit Module)
- Provide static convenience methods
- Use fluent API design with method chaining
- Support both sync and async operations
- Re-export functionality from submodules

### Core Types (XLKitCore Module)
- Workbook: Final class, manages sheets and images (not Sendable due to mutable state)
- Sheet: Final class, handles cells, formatting, images (not Sendable due to mutable state)
- CellValue: Enum with all Excel data types
- CellCoordinate: Struct for Excel-style coordinates
- CellRange: Struct for cell ranges
- Cell: Struct combining value and format
- CellFormat: Struct for comprehensive formatting

### CSV/TSV Operations (XLKitFormatters Module)
- Use XLKit static methods, not direct CSVUtils
- Support header row handling
- Auto-detect data types
- Handle special characters and quotes

### Image Operations (XLKitImages Module)
- Support GIF, PNG, JPEG, BMP, TIFF formats
- Auto-detect formats and sizes
- Support both Data and URL inputs
- Handle image embedding in cells

### XLSX Generation (XLKitXLSX Module)
- Generate OpenXML-compliant files
- Use temporary directories for file creation
- Implement proper XML escaping
- Support ZIP archive creation

## Testing Standards

### Test Coverage Requirements
- Test all public APIs
- Test error conditions and edge cases
- Test CSV/TSV import/export functionality
- Test image format detection and embedding
- Test XLSX file generation and saving
- Test coordinate and range operations

### Test Patterns
```swift
func testFeatureName() {
    // Arrange
    let workbook = XLKit.createWorkbook()
    
    // Act
    let result = workbook.someOperation()
    
    // Assert
    XCTAssertEqual(result, expectedValue)
}

func testFeatureNameWithInvalidInput() {
    // Act & Assert
    XCTAssertThrowsError(try someOperation(invalidInput)) { error in
        XCTAssertEqual(error as? XLKitError, .expectedError)
    }
}
```

### Performance Testing
- Test with large datasets
- Test memory usage patterns
- Test async operations
- Test concurrent access

## Documentation Standards

### Code Documentation
- All public APIs must have doc comments
- Include parameter descriptions
- Provide usage examples
- Document error conditions

### README Documentation
- Keep README.md comprehensive and up-to-date
- Include quick start examples
- Document all major features
- Provide API reference sections

### AGENT.MD Documentation
- Maintain detailed architecture documentation
- Include implementation details
- Provide development guidelines
- Document testing strategies

## Development Workflow

### Feature Development
1. Add functionality to appropriate module
2. Follow existing API patterns
3. Add comprehensive tests
4. Update documentation
5. Ensure CI passes

### Code Review Checklist
- Code follows Swift 6.0 standards
- All public APIs documented
- Tests cover new functionality
- No force-unwraps in public API
- Proper error handling
- Code is formatted correctly
- CI tests pass

### Commit Standards
- Use descriptive commit messages
- Reference issues when applicable
- Keep commits focused and atomic
- Test before committing

## Performance Considerations

### Memory Management
- Optimize for large datasets
- Use efficient data structures
- Minimize memory allocations
- Handle cleanup properly

### Async Operations
- Use async/await for file I/O
- Note: Async operations use synchronous implementation since Workbook/Sheet are not Sendable
- Implement proper concurrency where possible
- Avoid blocking operations
- Handle cancellation gracefully

### Optimization Guidelines
- Use batch operations for multiple cells
- Optimize range operations
- Minimize XML generation overhead
- Efficient image processing

## Security & Safety

### Input Validation
- Validate all user inputs
- Sanitize file paths and URLs
- Handle malformed data gracefully
- Prevent path traversal attacks

### Error Handling
- Never expose internal errors to users
- Provide meaningful error messages
- Log errors appropriately
- Handle edge cases gracefully

## Maintenance & Evolution

### Backward Compatibility
- Maintain API compatibility
- Use deprecation warnings for changes
- Provide migration guides
- Version APIs appropriately

### Code Quality
- Regular code reviews
- Automated testing
- Performance monitoring
- Documentation updates

### Future Considerations
- Plan for feature additions
- Consider platform expansion
- Monitor Swift evolution
- Track Excel format changes

## Integration Guidelines

### Package Manager
- Use Swift Package Manager
- Maintain proper dependencies
- Version modules appropriately
- Document requirements

### CI/CD Integration
- Automated testing on macOS
- Code formatting checks
- Documentation generation
- Release automation

### External Dependencies
- Minimize external dependencies
- Use only essential libraries
- Document dependency reasons
- Monitor for updates

## Troubleshooting Guide

### Common Issues
- Sendable conformance warnings
- Memory usage with large files
- Image format detection failures
- CSV parsing edge cases

### Debugging Tips
- Use proper logging
- Test with minimal examples
- Check file permissions
- Validate input data

### Performance Issues
- Profile memory usage
- Monitor file I/O operations
- Check async operation patterns
- Optimize data structures

## Architecture Update (2025-07-07)
- The XLSX engine now generates all required files for Excel compliance, including docProps, theme, styles, sharedStrings, and all relationship files.
- Worksheet, styles, and workbook XML are generated in a single-line, Excel-compliant format.
- The test runner (`XLKitTestRunner`) now includes automated validation using [CoreXLSX](https://github.com/CoreOffice/CoreXLSX) to ensure every generated file is fully compliant and readable by Excel and third-party tools.

## Compliance & Validation
- Every generated Excel file must be validated for structure and content using CoreXLSX.
- Validation checks include: workbook, worksheet, shared strings, styles, and row/cell integrity.
- The test runner must fail if the generated file is not fully compliant.

## Developer Workflow
- To add new Excel features, update the engine and add/extend validation in the test runner.
- Use the test runner to ensure all changes remain Excel-compliant.
- Manual unpacking and inspection of .xlsx files is no longer required for compliance.

## Recent Improvements (2025-07-07)
- **Perfect Aspect Ratio Preservation**: Implemented pixel-perfect image embedding with zero distortion
- **Empirically Derived Formulas**: Column width `pixels / 8.0`, Row height `pixels / 1.33` from manual Excel analysis
- **ImageSizingUtils**: Centralized sizing logic with consistent formulas across all operations
- **EMU Coordinate System**: Correct Excel internal format (1 pixel = 9525 EMUs) for perfect positioning
- **Comprehensive Testing**: All aspect ratios (16:9, 1:1, 9:16, 21:9, 3:4) tested and validated
- **Excel Compliance**: All generated files pass CoreXLSX validation with perfect aspect ratio preservation
- **Simplified API**: Easy-to-use methods with automatic sizing and aspect ratio preservation

## Image Embedding Implementation (2025-07-07) - PERFECT ASPECT RATIO PRESERVATION

### Overview
XLKit now supports **pixel-perfect image embedding** with automatic sizing and **perfect aspect ratio preservation**, matching Excel's manual behavior and professional quality exports.

### Key Features

**Perfect Aspect Ratio Preservation**
- Images maintain their **exact original proportions** regardless of cell dimensions
- **Zero stretching, squashing, or distortion** - pixel-perfect preservation
- Uses **empirically derived formulas** from manual Excel file analysis
- Supports **all aspect ratios**: 16:9, 1:1, 9:16, 21:9, 3:4, and any custom ratio

**Super-Precise Cell Sizing**
- Row height automatically adjusts to match image height using correct formulas
- Column width automatically adjusts to match image width using correct formulas
- Cells perfectly fit the embedded images with no overflow or underflow

**Precise Positioning**
- Images are positioned exactly at cell boundaries with perfect alignment
- Uses **EMU (English Metric Units)** for Excel's internal coordinate system
- **Zero offsets** that could cause misalignment or stretching

**Excel Compliance**
- Uses **correct Excel formulas** derived from manual file analysis
- Generates proper drawing XML with **accurate EMU coordinates**
- Maintains compatibility with **all Excel versions**
- Passes **CoreXLSX validation** for full compliance

### API Requirements

**Simplified Methods**
```swift
// Sheet extension method - auto-sizing with perfect aspect ratio
sheet.embedImageAutoSized(
    imageData,
    at: coordinate,
    of: workbook
) -> Bool

// XLKit convenience method
XLKit.embedImage(
    imageData,
    at: coordinate,
    in: sheet,
    of: workbook,
    scale: 1.0,
    maxWidth: 600,
    maxHeight: 400
) -> Bool
```

**Workbook Registration**
- Images are automatically registered with both sheet and workbook
- Ensures proper tracking and counting
- Prevents issues with image enumeration

**Correct Cell Sizing Formulas**
- **Column width**: `pixels / 8.0` (empirically derived from manual Excel files)
- **Row height**: `pixels / 1.33` (empirically derived from manual Excel files)
- **EMU conversion**: `pixels * 9525` (Excel's internal format)
- **Maintains perfect aspect ratio preservation** for all image types

**Critical Implementation Rules**
- **MANDATORY**: Use `ImageSizingUtils` for all sizing calculations
- **MANDATORY**: Use calculated values, never hardcoded dimensions
- **MANDATORY**: `rowOff = 0` in drawing XML to keep images within cell boundaries
- **MANDATORY**: Images must be positioned exactly at cell start point with no offsets
- **MANDATORY**: All aspect ratios must be preserved exactly - no exceptions

### Implementation Standards

**ImageSizingUtils Integration**
- **MANDATORY**: Use `ImageSizingUtils.calculateDisplaySize()` for all image scaling
- **MANDATORY**: Use `ImageSizingUtils.excelColumnWidth()` for column width calculations
- **MANDATORY**: Use `ImageSizingUtils.excelRowHeight()` for row height calculations
- **MANDATORY**: Use `ImageSizingUtils.calculateDrawingDimensions()` for EMU conversion
- **MANDATORY**: Never use hardcoded values for sizing calculations

**Drawing XML Generation**
- Generate precise drawing XML with **correct EMU coordinates**
- Use **Excel's EMU coordinate system** (1 pixel = 9525 EMUs)
- Include proper relationship references and image IDs
- Ensure **perfect aspect ratio preservation** in drawing dimensions

**Worksheet XML Updates**
- Include **calculated row heights** in `<row>` elements using correct formulas
- Set **calculated column widths** in `<col>` elements using correct formulas
- Ensure **cell dimensions match image dimensions** exactly
- Use **consistent formulas** across all sizing operations

**Image Processing**
- Support **GIF, PNG, JPEG** formats (BMP, TIFF removed for compatibility)
- **Auto-detect formats and sizes** with proper error handling
- Handle missing files gracefully with meaningful error messages
- **Preserve original image quality** during processing

### Testing Requirements

**Image Embedding Tests**
- **Test aspect ratio preservation** for all supported ratios (16:9, 1:1, 9:16, 21:9, 3:4)
- **Test automatic cell sizing** using correct formulas
- **Test precise positioning** with zero offsets
- **Test workbook registration** and image counting
- **Test error handling** for missing files and invalid formats
- **Test different image sizes** and scaling scenarios

**Validation Requirements**
- All generated files must pass **CoreXLSX validation**
- **Image count must match expected values**
- **Cell dimensions must match image dimensions** exactly
- **Aspect ratio must be preserved** with zero tolerance for distortion
- **Drawing XML must use correct EMU coordinates**
- **Worksheet XML must use calculated dimensions** (no hardcoded values)

**Test Coverage Requirements**
- **Unit tests** for all `ImageSizingUtils` methods
- **Integration tests** for complete image embedding workflow
- **Validation tests** using CoreXLSX for Excel compliance
- **Performance tests** for large images and multiple embeds
- **Error handling tests** for edge cases and failures

### Performance Guidelines

**Memory Management**
- Process images on-demand
- Efficient data handling for large images
- Proper cleanup after processing

**File Size Optimization**
- Optimized image compression
- Efficient XML generation
- Minimal overhead for embedded images

### Code Quality Standards

**Error Handling**
- Handle missing image files gracefully
- Provide meaningful error messages
- Use specific error types for image operations

**Documentation**
- Document all new image embedding methods
- Include usage examples
- Explain aspect ratio preservation
- Document cell sizing formulas

### Integration Guidelines

**Test Runner Integration**
- **`embed` test type** implemented in XLKitTestRunner
- **ImageEmbedGenerators.swift** handles image embedding tests
- **Output to `Embed-Test-Embed.xlsx`** with validation
- **CoreXLSX validation** ensures Excel compliance
- **All tests pass** with perfect aspect ratio preservation

**File Organization**
- **ImageSizingUtils.swift** in XLKitImages module for centralized sizing logic
- **XLKit.swift** provides simplified API methods
- **XLSXEngine.swift** uses correct EMU calculations
- **Maintains separation of concerns** across modules
- **Follows existing API patterns** for consistency

**API Design**
- **Simplified methods** for easy usage
- **Automatic sizing** with perfect aspect ratio preservation
- **Consistent error handling** across all methods
- **Backward compatibility** maintained where possible
- **Comprehensive documentation** for all new features

This comprehensive .cursorrules file provides all the guidelines and standards for AI agents working with the XLKit codebase, ensuring consistent, high-quality development practices.

## Documentation Maintenance Requirements

### Critical Update Requirements

**MANDATORY**: This .cursorrules file must be updated whenever:
- New features are added to the library
- Significant architectural changes are made
- New modules or major components are introduced
- API changes or breaking changes occur
- New testing patterns or requirements are established
- Performance optimizations or security improvements are implemented
- Platform requirements or dependencies change
- Coding standards or best practices are updated
- File organization or module structure changes
- New error types or handling patterns are introduced

### Table of Contents Maintenance

**MANDATORY**: The table of contents in AGENT.MD must be updated whenever:
- New sections are added to the document
- Existing sections are renamed or restructured
- Subsections are added or removed
- Document organization changes
- New implementation details are documented
- API references are updated
- Testing strategies are modified
- Performance considerations are added
- Architecture updates are documented
- Any content changes that affect document structure

**Update Process**:
1. Review all section headers in AGENT.MD using `grep_search` for `^## [A-Z]`
2. Compare with existing table of contents
3. Add missing sections with proper anchor links
4. Remove outdated sections that no longer exist
5. Update subsection structure to match document organization
6. Ensure all links are properly formatted and functional
7. Maintain consistent formatting and indentation
8. Verify that all sections in the document are represented in the TOC

**TOC Structure Standards**:
- Use proper markdown link format: `[Section Name](#anchor-link)`
- Maintain consistent indentation for subsections
- Group related sections logically
- Include all subsections under major sections
- Ensure anchor links match actual section headers
- Keep TOC organized in document order

### Update Checklist for AI Agents

When making significant changes to the codebase, ensure this .cursorrules file is updated to include:

- **New Features**: Add rules for new functionality and APIs
- **Architecture Changes**: Update module structure and dependencies
- **API Guidelines**: Add guidelines for new API patterns
- **Testing Requirements**: Update testing standards and coverage requirements
- **Performance Guidelines**: Add performance considerations for new features
- **Error Handling**: Update error types and handling requirements
- **Code Standards**: Update coding standards for new patterns
- **File Organization**: Update allowed/disallowed paths if needed
- **Platform Constraints**: Update platform requirements if changed
- **Integration Rules**: Add rules for new integrations or dependencies

### Synchronization with AGENT.MD

Ensure consistency between .cursorrules and AGENT.MD files:
- Architecture descriptions match between files
- Coding standards are consistent
- Testing requirements are aligned
- Platform constraints are synchronized
- File organization rules are consistent
- API design guidelines are synchronized
- Error handling patterns match
- Performance considerations are consistent

### Version Tracking

Keep track of major updates to this file:
- Document the date of significant updates
- Note the version of XLKit when changes were made
- Reference specific commits or issues that prompted updates
- Maintain a changelog of rule updates

### Enforcement

These rules are critical for maintaining code quality and consistency:
- All AI agents must follow these rules strictly
- Violations should be caught during code review
- CI/CD should enforce these rules where possible
- Regular audits should ensure rule compliance

This ensures that the .cursorrules file remains accurate and enforceable for all AI agents working with the codebase. 